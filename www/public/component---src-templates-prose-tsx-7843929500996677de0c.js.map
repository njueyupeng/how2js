{"version":3,"sources":["webpack://www/./src/components/writing/writing-view.tsx","webpack://www/./src/templates/prose.tsx"],"names":["post","pathname","children","type","React","hasShareApi","setHasShareApi","window","navigator","share","title","description","excerpt","image","name","value","timeToRead","category","content","seoDate","seoLastUpdated","JSON","stringify","article","isGarden","date","lastUpdated","year","yearDate","slug","variant","MDXProvider","components","MDXRenderer","body","size","axis","direction","display","spacing","justifyContent","alignItems","fontSize","fontWeight","href","parent","relativePath","encodeURIComponent","link","site","message","mt","data","location","primary","useColorModeValue","color","textAlign","as"],"mappings":"sRAwIA,IA5FoD,SAAC,GAAwC,IAAtCA,EAAqC,EAArCA,KAAMC,EAA+B,EAA/BA,SAAUC,EAAqB,EAArBA,SAAUC,EAAW,EAAXA,KAC/E,EAAsCC,YAAe,GAA9CC,EAAP,KAAoBC,EAApB,KAMA,OAJAF,aAAgB,WACdE,IAAiBC,OAAOC,UAAUC,SACjC,IAGD,gBAAC,IAAD,KACE,gBAAC,IAAD,CAAKC,MAAOV,EAAKU,MAAOC,YAAaX,EAAKW,YAAcX,EAAKW,YAAcX,EAAKY,QAASC,MAAOb,EAAKa,OACnG,wBAAMC,KAAK,iBAAiBC,MAAM,iBAClC,wBAAMD,KAAK,gBAAgBC,MAAUf,EAAKgB,WAAV,aAChC,wBAAMF,KAAK,iBAAiBC,MAAM,aAClC,wBAAMD,KAAK,gBAAgBC,MAAOf,EAAKiB,SAASH,OAChD,wBAAMA,KAAK,yBAAyBI,QAASlB,EAAKmB,UAClD,wBAAML,KAAK,wBAAwBI,QAASlB,EAAKoB,iBACjD,0BAAQjB,KAAK,uBACVkB,KAAKC,WACJC,QAAQ,CACNC,UAAU,EACVxB,KAAM,CACJU,MAAOV,EAAKU,MACZC,YAAaX,EAAKW,YAAcX,EAAKW,YAAcX,EAAKY,QACxDa,KAAMzB,EAAKmB,QACXO,YAAa1B,EAAKoB,eAClBO,KAAM3B,EAAK4B,SACXf,MAAOb,EAAKa,MACZgB,KAAM7B,EAAK6B,MAEbZ,SAAU,CACRH,KAAMd,EAAKiB,SAASH,KACpBe,KAAM7B,EAAKiB,SAASY,WAM9B,gBAAC,IAAD,CAAWC,QAAQ,aACjB,gBAAC,IAAD,KACG5B,EACD,gBAAC,IAAD,KACE,gBAAC,EAAA6B,YAAD,CAAaC,WAAYA,KACvB,gBAAC,EAAAC,YAAD,KAAcjC,EAAKkC,QAGvB,gBAAC,IAAD,CAAQC,KAAM,GAAIC,KAAK,aACvB,gBAAC,IAAD,MACA,gBAAC,IAAD,CAAQD,KAAM,EAAGC,KAAK,aACtB,gBAAC,KAAD,CACEC,UAAW,CAAC,SAAD,OACXC,QAAQ,OACRC,QAAQ,IACRC,eAAgB,CAAC,aAAD,iBAChBC,WAAY,CAAC,aAAD,WAEZ,gBAAC,KAAD,KACE,gBAAC,IAAD,CACEC,SAAU,CAAC,KAAM,KAAM,KAAb,YACVC,WAAW,SACXC,KAAI,0EAA4E5C,EAAK6C,OAAOA,OAAOC,cAHrG,kBADF,YASE,gBAAC,IAAD,CACEJ,SAAU,CAAC,KAAM,KAAM,KAAb,YACVC,WAAW,SACXC,KAAI,oCAAsCG,mBAAmB,0BAA0B9C,IAHzF,uBAQDI,EACC,gBAAC,KAAD,CAAOgC,UAAW,CAAC,SAAD,QAChB,gBAAC,KAAD,CAAqBW,KAAI,GAAKC,QAAWjD,EAAK6B,KAAQqB,QAASlD,EAAKU,QACpE,gBAAC,KAAD,CAAesC,KAAI,GAAKC,QAAWjD,EAAK6B,KAAQqB,QAASlD,EAAKU,MAAOoB,QAAQ,aAG/E,gBAAC,KAAD,CAAekB,KAAI,GAAKC,QAAWjD,EAAK6B,KAAQqB,QAASlD,EAAKU,SAG7D,UAAJP,GACC,gBAAC,IAAD,CAAMgD,GAAI,EAAGT,SAAU,CAAC,KAAM,KAAM,KAAb,aAAvB,iBACiB1C,EAAK0B,kB,wGCvGlC,UAjBiE,SAAC,GAAgD,IAAtC1B,EAAqC,EAA7CoD,KAAQpD,KAAoBC,EAAiB,EAA7BoD,SAAYpD,SACxFqD,GAAUC,uBAAkB,uBAAD,6BAEjC,OACE,gBAAC,IAAD,CAAavD,KAAMA,EAAMC,SAAUA,EAAUE,KAAK,SAChD,gBAAC,IAAD,CAAMqD,MAAOF,EAASX,WAAY,IAAKc,UAAU,SAASf,SAAU,CAAC,KAAM,KAAM,KAAb,yBACjE1C,EAAKiB,SAASH,MAEjB,gBAAC,IAAD,CAAQqB,KAAM,EAAGC,KAAK,aACtB,gBAAC,IAAD,CAASsB,GAAG,KAAKD,UAAU,UACxBzD,EAAKU,OAER,gBAAC,IAAD,CAAQyB,KAAM,CAAC,GAAI,KAAM,KAAM,IAAKC,KAAK","file":"component---src-templates-prose-tsx-7843929500996677de0c.js","sourcesContent":["import * as React from \"react\"\nimport { graphql } from \"gatsby\"\nimport { Box, Container, Divider, Link as ExternalLink, Text, Stack } from \"@chakra-ui/react\"\nimport { MDXProvider } from \"@mdx-js/react\"\nimport { MDXRenderer } from \"gatsby-plugin-mdx\"\nimport { Layout } from \"../blocks/layout\"\nimport { SEO } from \"../seo\"\nimport { SkipNavContent } from \"../a11y/skip-nav\"\nimport { Spacer } from \"../blocks/spacer\"\nimport { Prose } from \"../typography/prose\"\nimport { components } from \"../mdx\"\nimport { article } from \"../../constants/json-ld\"\nimport { ShareAnywhereButton, TwitterButton } from \"../buttons\"\nimport { site } from \"../../constants/meta\"\n\nexport type WritingViewDataProps = {\n  post: {\n    slug: string\n    title: string\n    date: string\n    description: string\n    body: string\n    excerpt: string\n    lastUpdated: string\n    seoDate: string\n    yearDate: string\n    seoLastUpdated: string\n    subtitle: string\n    timeToRead: string\n    image?: string\n    category: {\n      name: string\n      slug: string\n    }\n    parent: {\n      parent: {\n        relativePath: string\n      }\n    }\n  }\n  pathname: string\n  type: \"prose\" | \"tutorial\"\n}\n\nconst WritingView: React.FC<WritingViewDataProps> = ({ post, pathname, children, type }) => {\n  const [hasShareApi, setHasShareApi] = React.useState(false)\n\n  React.useEffect(() => {\n    setHasShareApi(!!window.navigator.share)\n  }, [])\n\n  return (\n    <Layout>\n      <SEO title={post.title} description={post.description ? post.description : post.excerpt} image={post.image}>\n        <meta name=\"twitter:label1\" value=\"Time To Read\" />\n        <meta name=\"twitter:data1\" value={`${post.timeToRead} Minutes`} />\n        <meta name=\"twitter:label2\" value=\"Category\" />\n        <meta name=\"twitter:data2\" value={post.category.name} />\n        <meta name=\"article:published_time\" content={post.seoDate} />\n        <meta name=\"article:modified_time\" content={post.seoLastUpdated} />\n        <script type=\"application/ld+json\">\n          {JSON.stringify(\n            article({\n              isGarden: false,\n              post: {\n                title: post.title,\n                description: post.description ? post.description : post.excerpt,\n                date: post.seoDate,\n                lastUpdated: post.seoLastUpdated,\n                year: post.yearDate,\n                image: post.image,\n                slug: post.slug,\n              },\n              category: {\n                name: post.category.name,\n                slug: post.category.slug,\n              },\n            })\n          )}\n        </script>\n      </SEO>\n      <Container variant=\"proseRoot\">\n        <SkipNavContent>\n          {children}\n          <Prose>\n            <MDXProvider components={components}>\n              <MDXRenderer>{post.body}</MDXRenderer>\n            </MDXProvider>\n          </Prose>\n          <Spacer size={12} axis=\"vertical\" />\n          <Divider />\n          <Spacer size={6} axis=\"vertical\" />\n          <Stack\n            direction={[`column`, `row`]}\n            display=\"flex\"\n            spacing=\"5\"\n            justifyContent={[`flex-start`, `space-between`]}\n            alignItems={[`flex-start`, `center`]}\n          >\n            <Box>\n              <ExternalLink\n                fontSize={[`md`, null, null, `1.125rem`]}\n                fontWeight=\"medium\"\n                href={`https://github.com/LekoArts/portfolio-v2/edit/main/www/content/writing/${post.parent.parent.relativePath}`}\n              >\n                Edit on GitHub\n              </ExternalLink>\n              {` `}-{` `}\n              <ExternalLink\n                fontSize={[`md`, null, null, `1.125rem`]}\n                fontWeight=\"medium\"\n                href={`https://www.twitter.com/search?q=${encodeURIComponent(`https://www.lekoarts.de${pathname}`)}`}\n              >\n                Discuss on Twitter\n              </ExternalLink>\n            </Box>\n            {hasShareApi ? (\n              <Stack direction={[`column`, `row`]}>\n                <ShareAnywhereButton link={`${site.url}${post.slug}`} message={post.title} />\n                <TwitterButton link={`${site.url}${post.slug}`} message={post.title} variant=\"outline\" />\n              </Stack>\n            ) : (\n              <TwitterButton link={`${site.url}${post.slug}`} message={post.title} />\n            )}\n          </Stack>\n          {type === `prose` && (\n            <Text mt={6} fontSize={[`md`, null, null, `1.125rem`]}>\n              Last updated: {post.lastUpdated}\n            </Text>\n          )}\n        </SkipNavContent>\n      </Container>\n    </Layout>\n  )\n}\n\nexport default WritingView\n\nexport const query = graphql`\n  fragment WritingView on Post {\n    slug\n    title\n    description\n    excerpt\n    body\n    seoLastUpdated: lastUpdated\n    lastUpdated(formatString: \"MMM DD, YYYY\")\n    seoDate: date\n    yearDate: date(formatString: \"YYYY\")\n    date(formatString: \"MMM DD, YYYY\")\n    subtitle\n    timeToRead\n    image\n    category {\n      name\n      slug\n    }\n    ... on MdxPost {\n      parent {\n        ... on Mdx {\n          parent {\n            ... on File {\n              relativePath\n            }\n          }\n        }\n      }\n    }\n  }\n`\n","import * as React from \"react\"\nimport { PageProps, graphql } from \"gatsby\"\nimport { Text, useColorModeValue } from \"@chakra-ui/react\"\nimport WritingView, { WritingViewDataProps } from \"../components/writing/writing-view\"\nimport { Heading } from \"../components/typography/heading\"\nimport { Spacer } from \"../components/blocks/spacer\"\n\nconst ProseTemplate: React.FC<PageProps<WritingViewDataProps>> = ({ data: { post }, location: { pathname } }) => {\n  const primary = useColorModeValue(`brand.textEmphasized`, `brand.dark.textEmphasized`)\n\n  return (\n    <WritingView post={post} pathname={pathname} type=\"prose\">\n      <Text color={primary} fontWeight={500} textAlign=\"center\" fontSize={[`md`, null, null, `1.125rem`, `1.3125rem`]}>\n        {post.category.name}\n      </Text>\n      <Spacer size={6} axis=\"vertical\" />\n      <Heading as=\"h1\" textAlign=\"center\">\n        {post.title}\n      </Heading>\n      <Spacer size={[16, null, null, 20]} axis=\"vertical\" />\n    </WritingView>\n  )\n}\n\nexport default ProseTemplate\n\nexport const query = graphql`\n  query ProseTemplate($slug: String!) {\n    post(slug: { eq: $slug }) {\n      ...WritingView\n    }\n  }\n`\n"],"sourceRoot":""}